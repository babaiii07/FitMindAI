import os
from dotenv import load_dotenv
from langgraph.prebuilt import create_react_agent
from langgraph_supervisor import create_supervisor
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_tavily import TavilySearch
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import HumanMessage, BaseMessage, AIMessage, FunctionMessage
from langchain_core.tools import tool

load_dotenv()

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

if GOOGLE_API_KEY:
    os.environ["GOOGLE_API_KEY"] = GOOGLE_API_KEY
if TAVILY_API_KEY:
    os.environ["TAVILY_API_KEY"] = TAVILY_API_KEY

def initialize_workflow():
    web_search = TavilySearch(max_results=3) if TAVILY_API_KEY else None

    llm = ChatGoogleGenerativeAI(model="models/gemini-1.5-pro", temperature=0.2, max_output_tokens=2048)

    research_agent_prompt = ChatPromptTemplate.from_messages([
        ("system", '''You are a research agent. Use Tavily to fetch the latest, most relevant fitness and nutrition information for the user's needs in India. 
- Always prioritize up-to-date, actionable data from current sources, including:
    - Popular diets and food preferences in India
    - Average gym membership costs and home workout alternatives
    - Budget-friendly, locally available foods and prices in INR
    - Effective exercises tailored to different goals (weight loss, muscle gain, endurance)
    - Culturally relevant meals and affordable substitutions
    - Scientific findings or official guidelines
- Provide accurate data with links to sources where available.
- Keep answers structured and concise. If research is complete, indicate readiness.'''),
        MessagesPlaceholder(variable_name="messages"),
    ])

    research_agent = create_react_agent(
        model=llm,
        tools=[web_search] if web_search else [],
        prompt=research_agent_prompt,
        name="research_agent",
    )

    plan_prompt = ChatPromptTemplate.from_messages([
        ("system", '''You are a certified fitness coach and nutrition expert. Create a personalized weekly gym training and daily meal plan for the user based on provided inputs and research findings.
Output format must be markdown with proper headings and bullet points.

The plan must include:

# üèãÔ∏è Weekly Gym Training Plan
- Break down the weekly workout by day.
- For each day, specify:
    - Target muscle group or focus (e.g., legs, push, cardio)
    - Exercises with sets √ó reps √ó rest time
    - Home and gym variations
    - Estimated daily cost for gym usage (in ‚Çπ INR)

# üçΩÔ∏è Daily Meal Plan
- For each day (Mon‚ÄìSun), include:
    - Breakfast, lunch, dinner, snacks
    - Calories per meal
    - Key nutrients (protein, carbs, fats)
    - Price per meal in ‚Çπ INR (based on average Indian prices)

# üßò Lifestyle & Wellness Tips
- Tips for hydration, sleep, stress, recovery
- Tips for staying healthy and on budget in India

# üí° Summary
- Weekly calorie intake
- Total weekly food cost (‚Çπ)
- Total weekly gym cost (‚Çπ)
- Key recommendations and scientific insights used (with links if available)

Use clear formatting, avoid filler text, and focus only on the structured plan.'''),
        MessagesPlaceholder(variable_name="messages"),
        ("human", "Generate the personalized gym and nutrition plan using the details and research provided."),
    ])

    plan_agent = create_react_agent(
        model=llm,
        tools=[],
        prompt=plan_prompt,
        name="plan_agent",
    )

    supervisor = create_supervisor(
        model=llm,
        agents=[research_agent, plan_agent],
        prompt=(
            """You are a supervisor managing two agents: a research agent (for web search and latest info) and a plan agent (for generating the personalized plan). \
Your job is to ensure the user receives a structured, detailed fitness and meal plan. \
Workflow:\n1. After receiving user details, assess whether to use the research_agent for more information.\n2. Once findings are collected, pass all info to the plan_agent.\n3. Return ONLY the full plan generated by the plan_agent as the final output. \
Do not add any other content or commentary."""
        ),
        add_handoff_back_messages=True,
        output_mode="full_history",
    ).compile()

    return supervisor
