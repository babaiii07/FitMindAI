import streamlit as st
import os
from dotenv import load_dotenv
from langchain_groq import ChatGroq
from langchain.prompts import ChatPromptTemplate
from langchain.chains import LLMChain

load_dotenv()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not GROQ_API_KEY:
    st.error("GROQ_API_KEY not found in environment variables. Please set it in a .env file.")
    st.stop()
os.environ['GROQ_API_KEY'] = GROQ_API_KEY
llm = ChatGroq(model_name="gemma2-9b-it", max_tokens=5000)

prompt_template = ChatPromptTemplate.from_template("""
You are a professional fitness coach and nutritionist.

Create a personalized gym training and nutrition plan for the following user:

Name: {name}
Age: {age}
Gender: {gender}
Weight: {weight} kg
Height: {height} cm
BMI: {bmi}
BMI Category: {bmi_category}
Body Goal: {goal}
Workout Experience: {experience}
Preferred Workout Time: {workout_time}
Diet Preference: {diet_preference}
Allergies or Food Restrictions: {allergies}
Health Conditions: {health_issues}

**Instructions:**
1. Recommend a weekly gym training schedule with types of exercises, number of sets/reps, and rest days.
2. Provide a full-day meal plan (breakfast, lunch, dinner, and snacks) that aligns with their dietary preferences and goals, including recommended protein sources and other essential nutrients.
3. Mention any lifestyle tips or general advice to support their fitness journey.
4. Ensure the output is well-structured and easy to read, using markdown.

Make the output simple, actionable, and beginner-friendly if needed.
""")

chain = LLMChain(llm=llm, prompt=prompt_template)

def calculate_bmi(weight_kg, height_cm):
    """Calculates BMI and returns category."""
    if not all([weight_kg, height_cm]):
        return None, "Please provide both weight and height."

    try:
        weight_kg = float(weight_kg)
        height_cm = float(height_cm)
    except ValueError:
        return None, "Weight and height must be numbers."

    if height_cm <= 0: 
        return None, "Height must be greater than 0."

    height_m = height_cm / 100
    bmi = weight_kg / (height_m ** 2)

    bmi_category = ""
    if bmi < 18.5:
        bmi_category = "Underweight"
    elif 18.5 <= bmi < 24.9:
        bmi_category = "Normal weight"
    elif 25 <= bmi < 29.9:
        bmi_category = "Overweight"
    else:
        bmi_category = "Obesity"

    return round(bmi, 2), bmi_category

st.set_page_config(page_title="Gym Training & Diet Planner", layout="centered")

st.title("ðŸ’ª Personalized Gym Training & Diet Planner")

st.markdown("""
    Fill in your details below to get a custom fitness and nutrition plan generated by AI!
""")

with st.form("user_details_form"):
    st.header("Your Personal Information")
    name = st.text_input("Name")
    age = st.number_input("Age", min_value=1, max_value=100, value=25)
    gender = st.selectbox("Gender", ["Male", "Female", "Prefer not to say"])

    col1, col2 = st.columns(2)
    with col1:
        weight = st.number_input("Weight (kg)", min_value=1.0, max_value=300.0, value=70.0, step=0.1)
    with col2:
        height = st.number_input("Height (cm)", min_value=50.0, max_value=250.0, value=175.0, step=0.1)

    st.header("Your Fitness Goals & Preferences")
    goal = st.text_area("Body Goal (e.g., Lose weight, Build muscle, Maintain fitness)", "Lose weight and build muscle")
    experience = st.selectbox("Workout Experience", ["Beginner", "Intermediate", "Advanced"])
    workout_time = st.text_input("Preferred Workout Time (e.g., Morning, Evening, Any)", "Evening")
    diet_preference = st.text_input("Diet Preference (e.g., Vegetarian, Vegan, Mediterranean, Omnivore)", "Omnivore")
    allergies = st.text_area("Allergies or Food Restrictions (e.g., Peanuts, Gluten, Lactose)", "None")
    health_issues = st.text_area("Health Conditions (e.g., Diabetes, High Blood Pressure, Joint pain)", "None")

    submitted = st.form_submit_button("Generate My Plan")

    if submitted:
      
        bmi, bmi_category = calculate_bmi(weight, height)

        if bmi is None:
            st.error(bmi_category) 
        else:
            st.subheader(f"Your BMI: {bmi} ({bmi_category})")

         
            llm_inputs = {
                "name": name,
                "age": age,
                "gender": gender,
                "weight": weight,
                "height": height,
                "bmi": bmi,
                "bmi_category": bmi_category,
                "goal": goal,
                "experience": experience,
                "workout_time": workout_time,
                "diet_preference": diet_preference,
                "allergies": allergies,
                "health_issues": health_issues,
            }

            try:
                with st.spinner("Generating your personalized plan..."):
                    response = chain.invoke(llm_inputs)
                    generated_content = response['text']

                st.subheader("Your Personalized Plan:")
                st.markdown(generated_content)

            except Exception as e:
                st.error(f"Error generating content with LLM: {e}")

st.markdown("""
    --- 
    *Disclaimer: This plan is AI-generated and for informational purposes only. Consult with a healthcare professional or certified trainer before starting any new diet or exercise program.*
""") 